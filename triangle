# pygame template
import pygame
import math


pygame.init()

WIDTH = 640
HEIGHT = 480
SIZE = (WIDTH, HEIGHT)

screen = pygame.display.set_mode(SIZE)
clock = pygame.time.Clock()

# ---------------------------
# Initialize global variables
max_health = 1000
health = 1000
frame = 0
# ---------------------------

pos_scales = (234, 195)
rel_poses = []

running = True
while running:
    # EVENT HANDLING
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            [x, y] = event.pos
            rel_poses.append(f"(pos_scales[0] + {x - pos_scales[0]}), pos_scales[1] + {y-pos_scales[1]})")
            print(f"[{', '.join(rel_poses)}]")

    # GAME STATE UPDATES
    # All game math and comparisons happen here

    # DRAWING
    screen.fill((220, 220, 220))  # always the first drawing command

    start_x = 50
    spacing = 0
    number_of_points = 400
    width = 1
    height = 1
    x = 0
    y_offset = HEIGHT // 2
    points = []
    while x < (width + spacing) * number_of_points:
        y = math.cos((x+frame)/20) * math.sin(x/100) * 50 + y_offset
        points.append((x + start_x + frame, y))
        x += 10
    pygame.draw.aalines(screen, (60, 0, 60), False, points)
    x, y = points[-1]
    size = 50
    pygame.draw.rect(screen, (60, 0, 60), (x-size//2, y-size//2, size, size))

    pygame.draw.polygon(screen, (60, 0, 60), [(pos_scales[0] + 28, pos_scales[1] + 30),
                                             (pos_scales[0] + -2, pos_scales[1] + -70),
                                             (pos_scales[0] + -13, pos_scales[1] + 12)])
    
    # Must be the last two lines
    # of the game loop
    pygame.display.flip()
    clock.tick(30)
    #---------------------------


pygame.quit()
